"""
Django settings for bluewind project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
from local_secrets import load_secrets_to_env


load_secrets_to_env("dev-env")
import os
print(os.environ)

from .settings_base import *

from pathlib import Path
import os



# Take environment variables from .env file
if os.environ.get('ENVIRONMENT') != 'prod' and os.environ.get('ENVIRONMENT') != 'staging':
    if os.environ.get('ENVIRONMENT') == 'test':
        environ.Env.read_env(os.path.join(BASE_DIR, '.env'))
        os.environ['ENVIRONMENT'] = 'test'
    else:
        environ.Env.read_env(os.path.join(BASE_DIR, '.env'))




# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

# GOOGLE_OAUTH_CLIENT_ID = env.list('GOOGLE_OAUTH_CLIENT_ID')
# GOOGLE_OAUTH_CLIENT_SECRET= env.list('GOOGLE_OAUTH_CLIENT_SECRET')

# Application definition

INSTALLED_APPS += [
    'debug_toolbar',
]

WSGI_APPLICATION = 'bluewind.wsgi.application'

import sys


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DB_USERNAME = os.environ.get('DB_USERNAME')
DB_PASSWORD = os.environ.get('DB_PASSWORD')
DB_HOST = os.environ.get('DB_HOST')
DB_PORT = os.environ.get('DB_PORT')
DB_NAME = os.environ.get('DB_NAME', 'postgres')

# DATABASE_URL = f"postgresql://{DB_USERNAME}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/postgres"
DB_INFO = {
    'ENGINE': 'django.db.backends.postgresql',
    'NAME': 'postgres',
    'USER': DB_USERNAME,
    'PASSWORD': DB_PASSWORD,
    'HOST': DB_HOST,
    'PORT': DB_PORT,
    'CONN_MAX_AGE': 600,
    'OPTIONS': {
        'sslmode': 'require',
    },
}
DATABASES = {
    'default': DB_INFO
}

if os.environ.get('ENVIRONMENT') != 'prod':
    print('DATABASES:', DATABASES, 'DB_INFO:', DB_INFO)
    

CSRF_TRUSTED_ORIGINS = os.environ.get('CSRF_TRUSTED_ORIGINS', '').split(',')


# if 'test' in sys.argv:
#     DATABASES['default']['USER'] = 'test_user'
#     DATABASES['default']['PASSWORD'] = 'test_password'

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators


DEBUG_TOOLBAR_CONFIG = {
    # 'EXTRA_SIGNALS': True,
    'SHOW_TEMPLATE_CONTEXT': True,
    'ENABLE_STACKTRACES': True,
    'SHOW_TOOLBAR_CALLBACK': lambda request: True,
    'STACKTRACE_DEPTH': 10000,  # Increase this number as needed
}

DEBUG_TOOLBAR_PANELS = [
    'debug_toolbar.panels.versions.VersionsPanel',
    'debug_toolbar.panels.timer.TimerPanel',
    'debug_toolbar.panels.settings.SettingsPanel',
    'debug_toolbar.panels.headers.HeadersPanel',
    'debug_toolbar.panels.request.RequestPanel',
    'debug_toolbar.panels.sql.SQLPanel',
    'debug_toolbar.panels.staticfiles.StaticFilesPanel',
    'debug_toolbar.panels.templates.TemplatesPanel',
    'debug_toolbar.panels.cache.CachePanel',
    'debug_toolbar.panels.signals.SignalsPanel',
    'debug_toolbar.panels.logging.LoggingPanel',
    'debug_toolbar.panels.redirects.RedirectsPanel',
]


# LOGGING = {
#     'version': 1,
#     'filters': {
#         'require_debug_true': {
#             '()': 'django.utils.log.RequireDebugTrue',
#         }
#     },
#     'handlers': {
#         'console': {
#             'level': 'DEBUG',
#             'filters': ['require_debug_true'],
#             'class': 'logging.StreamHandler',
#         }
#     },
#     'loggers': {
#         'django.db.backends': {
#             'level': 'DEBUG',
#             'handlers': ['console'],
#         }
#     }
# }


# dummy change to test cia

MIDDLEWARE += [
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]
# cdnsjkcdnsjkcndsk