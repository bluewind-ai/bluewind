make sure there is no nullable charfield
defensive programming on the filter by tenant: in the model manager and in every query
pgbadger
pgstats
get_absolute_url of resource
requirements folder
mozilla observatory
checkout django webtest

feature ascension: cli / django admin / api / beautiful web client
use django-ajax-datatable
should you name table.id or table.uuid, if you use uuids?
easy redirect after id change

Should you be able to delete your workspace? Probably, see clickup. The problem is that my admin page depends on a workspace. The workspace resource should be under /admin/settings or something. This way after deleting your workspace, you remain on the page.

I have very dangerous tests that should never run in production and others that are very important to run regularly in production

nice website, I should post bluewind in here too: https://app.fossa.com/projects/git%2Bgithub.com%2Ftemporalio%2Ftemporal-helm-charts/refs/branch/master/eac55bff23c021e146d9e608ab895b2ac1f11f9e/preview

add to naming conventions: adjectives should not be prefixes, they should be suffixes. session_extended over extended_session

visualize autodiscovery to give full control and transparency to the user

think more about folders: clickup and windmill have this concept. There is something useful here. For permissions, but also to give this file hierarchy...
Clickup decided to limit the number of folders as far as I understand: workspace / space / lists
I think it's a good balance. nested folders are hard.

remove id 91017349113822292053236764842401387445

URGENT: put project in root folder

I need to do something like this: https://www.reddit.com/r/aws/comments/mrpexd/finding_resources_outside_of_cloudformation_stacks/
Because I have dangling resources, things outside of my cloudformation stack

Run tests on previous commits to see if they still work, to see if changes are backwards compatible.

add vantage to AWS accounts
add in the CI a step that checks if things work ok.

Campaign Goal: build much needed django improvements.
Opportunities for challengers: get visibility from Django community

buttons at the top to save
no db logs in console but it still needs to be pushed to DB
don't allow /admin/ without workspaces and without making sure user is logged in
PR campaigns: this french immigrant is building an app that does everything, maybe find something different than french immigrant, more memorable.
add new rule: log a lot. but please use logger(django.temp)
evolution of number of queries for the same basic action.
get metric number of DB query grouped by request path sliced by interval of 5 minutes.
why flow run not in the search
when clicking out of command palette -> leave the palette
Learning: blacklist the word content_type. It should only be contenttype
Learning: Systematically logger what's sent to the save function
remove actionrun
learning: form inlines obviously can't be saved before their dependencies, which is why flow run argument couldn't be used. for inlines related things, use statuses.
build something that removes logs, maybe a key is to remove the import and then delete out of import lines
prevent LLMS from enforcing: models as strings "Flow"

change_form_template = (
"admin/change_form.html" -> "admin/flow_runs/flowrun/change_form.html" # Update this line
)
these types of errors are very common
very common error: writing template instead of templates
make sure LLMS can't logger big stuff. create an error if they do.
at end of feature, systematically replace logger = logging.getLogger("django.not_used") with logger = logging.getLogger("django.not_used")
no message on save objects automatically added
hard code to make them use this logger
always use lazy loa
foreign key relationships always lazily loaded and always like that "file_watchers.FileWatcher"
all the empty files given by startapp should be removed
incident:
corrective actions: take actions and implement processes to fix incident
preventive actions: take actions and implement processes to prevent incident
monitoring actions: take actions and implement processes to detect incidents of this type
default logging between common functions: CREATE SAVE DELETE (maybe list?) and maybe after_save and flows with a buffer size if stuff too big
never see or have to fill workspace_id, same for user, same for created_at update_at
created_at update_at by default on all models

ACCOUNT FOR THIS:

look, after a file is changed,
if this file is in a models.py and this model is in the DB (look up the Model object),
I want to be able to save the content of the models.py. Oh, I think I need the app_label in the models.py

import logging

from django.conf import settings
from django.db import models

from workspaces.models import WorkspaceRelated

temp_logger = logging.getLogger("django.not_used")

class FileChange(WorkspaceRelated):
"""
Model to represent a detected file change.
"""

    file_watcher = models.ForeignKey(
        "file_watchers.FileWatcher",
        on_delete=models.CASCADE,
        related_name="file_changes",
        help_text="The file watcher that detected this change.",
    )
    file_path = models.CharField(
        max_length=1024, help_text="The path of the file that was changed."
    )
    change_type = models.CharField(
        max_length=50,
        help_text="Type of change detected (e.g., modified, created, deleted).",
    )
    timestamp = models.DateTimeField(
        auto_now_add=True, help_text="Timestamp of when the change was detected."
    )
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        help_text="The user responsible for the file change, if known.",
    )

    def __str__(self):
        return f"FileChanged(file_path={self.file_path}, change_type={self.change_type}, timestamp={self.timestamp})"

    def save(self, *args, **kwargs):
        temp_logger.debug(f"Saving FileChange: {self}")
        super().save(*args, **kwargs)
        temp_logger.debug(f"FileChange saved: {self}")

class Model(WorkspaceRelated):
"""
Example Django model named 'Model' inheriting from WorkspaceRelated.
This model now includes a 'content' field to store file content.
"""

    name = models.CharField(max_length=100)
    content = models.TextField(blank=True, null=True)  # Field to store file content

    def __str__(self):
        return self.name

    class Meta:
        unique_together = ("workspace", "name")

As you can see I discovered a task while working on one. In this case I should save the current task and not run it.

regression: when I added the watchdog feature my hot reload broke
oh actually it's fine, somehow the files in admin_autoregister are not being watched. weird.

idea: find the people who need help on the web and the people who provide a service who could help them

I forgot to commit my code before working on a new task. I need to create corrective, preventive and monitor actions for this.

edit of previous message:
I forgot to commit my code before working on a new task. I need to create preventive and monitor actions for this.

Because there is no point creating corrective actions. Corrective actions inspire preventive and monitoring ones, but they''re not really part of the improvement process ( in fact they should be avoided )

Things are getting very meta with the logs as you can see above. Talking about the logs in the logs. I have done a lot of meta things recently.
Should I push the todos/logs in DB only? DB + file system?


How do I make sure the file watcher is created on startup? You see I have a bunch of things that are needed to just get the project working. I put them in the DB which makes my life easier, but it''s also harder now because when I wipe db I need to rebuild these objects. I am thinking maybe a wizard or something. Or maybe I just don''t wipe the db.

Incident: I just prompted chatgpt with a lot of context:
FileWatcher, FileChange, Model, and after_save_file_watchers. The thing is that now I can just listen to the filechange object.
-> How do I make sure that my context is always lean? Because it''s possible sometimes I add more, like this example.

and then I realized it wasn''t needed.

I think I should forbid creating entities in the before_save() and only favor after_save()

right now I shipped the file watcher feature and I am discovering later that there are regressions. What could be very powerful is if tests were automagically created for this.
And the most powerful tests in my opinion are the ones that come after a regression is discovered. Because they''re very relevant. Since the bug happened. The problem with a lot of tests is they never break, which defeats the purpose.

def file_changes_after_save(file_changes): -> should not be plural, it should always be singular

the name of the file watcher is useless.
I discovered file watchers can't be edited. This is ok but incorporated into the models or somewhere, so that django admin automatically knows.

clicking outside of command panel should remove it

I just realized it would be more appropriate if FileWatcher is a singleton, which means I need to be prompted "Can you create more than one". wizzard for model creation.

maybe put the logger on ALL the files? Also allows me to log the methods inputs and outputs. But then would this be considered an AppLog? By the way I need to rename applog.

replace flows by workflows

linters based on the type: file_changes_on_ready has no type

very disappointing errors don''t give tracebacks "2024-09-15 21:11:02,389 [ERROR] [no_request_id] django.temp: Error in file watchers operation: null value in column "workspace_id" of relation "file_watchers_filewatcher" violates not-null constraint"

rules: if you log more than 50 characters, the content will be trimmed. be wise about what you log.

define function signatures in flow definition

add a comment "# change to django.temp to show all logs in this file"

if something has no import, better errors should appear
The migration from using raw content to bespoke table for files is a great small exercise to keep repeating until it''s perfect.
learning: do not rename functions or classes you''re given. Do not create any new method

"you cannot create any" other files than models.py and admin.py

get a clean schema of the request. create a model for this

@admin.register(FlowRun) is a bit weird with InWorkspace
