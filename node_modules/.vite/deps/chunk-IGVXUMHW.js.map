{
  "version": 3,
  "sources": ["browser-external:os", "browser-external:fs", "browser-external:net", "browser-external:tls", "browser-external:perf_hooks", "../../postgres/src/index.js", "../../postgres/src/query.js", "../../postgres/src/errors.js", "../../postgres/src/types.js", "../../postgres/src/connection.js", "../../postgres/src/result.js", "../../postgres/src/queue.js", "../../postgres/src/bytes.js", "../../postgres/src/subscribe.js", "../../postgres/src/large.js"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"os\" has been externalized for browser compatibility. Cannot access \"os.${key}\" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"fs\" has been externalized for browser compatibility. Cannot access \"fs.${key}\" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"net\" has been externalized for browser compatibility. Cannot access \"net.${key}\" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"tls\" has been externalized for browser compatibility. Cannot access \"tls.${key}\" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"perf_hooks\" has been externalized for browser compatibility. Cannot access \"perf_hooks.${key}\" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "import os from 'os'\nimport fs from 'fs'\n\nimport {\n  mergeUserTypes,\n  inferType,\n  Parameter,\n  Identifier,\n  Builder,\n  toPascal,\n  pascal,\n  toCamel,\n  camel,\n  toKebab,\n  kebab,\n  fromPascal,\n  fromCamel,\n  fromKebab\n} from './types.js'\n\nimport Connection from './connection.js'\nimport { Query, CLOSE } from './query.js'\nimport Queue from './queue.js'\nimport { Errors, PostgresError } from './errors.js'\nimport Subscribe from './subscribe.js'\nimport largeObject from './large.js'\n\nObject.assign(Postgres, {\n  PostgresError,\n  toPascal,\n  pascal,\n  toCamel,\n  camel,\n  toKebab,\n  kebab,\n  fromPascal,\n  fromCamel,\n  fromKebab,\n  BigInt: {\n    to: 20,\n    from: [20],\n    parse: x => BigInt(x), // eslint-disable-line\n    serialize: x => x.toString()\n  }\n})\n\nexport default Postgres\n\nfunction Postgres(a, b) {\n  const options = parseOptions(a, b)\n      , subscribe = options.no_subscribe || Subscribe(Postgres, { ...options })\n\n  let ending = false\n\n  const queries = Queue()\n      , connecting = Queue()\n      , reserved = Queue()\n      , closed = Queue()\n      , ended = Queue()\n      , open = Queue()\n      , busy = Queue()\n      , full = Queue()\n      , queues = { connecting, reserved, closed, ended, open, busy, full }\n\n  const connections = [...Array(options.max)].map(() => Connection(options, queues, { onopen, onend, onclose }))\n\n  const sql = Sql(handler)\n\n  Object.assign(sql, {\n    get parameters() { return options.parameters },\n    largeObject: largeObject.bind(null, sql),\n    subscribe,\n    CLOSE,\n    END: CLOSE,\n    PostgresError,\n    options,\n    reserve,\n    listen,\n    begin,\n    close,\n    end\n  })\n\n  return sql\n\n  function Sql(handler) {\n    handler.debug = options.debug\n\n    Object.entries(options.types).reduce((acc, [name, type]) => {\n      acc[name] = (x) => new Parameter(x, type.to)\n      return acc\n    }, typed)\n\n    Object.assign(sql, {\n      types: typed,\n      typed,\n      unsafe,\n      notify,\n      array,\n      json,\n      file\n    })\n\n    return sql\n\n    function typed(value, type) {\n      return new Parameter(value, type)\n    }\n\n    function sql(strings, ...args) {\n      const query = strings && Array.isArray(strings.raw)\n        ? new Query(strings, args, handler, cancel)\n        : typeof strings === 'string' && !args.length\n          ? new Identifier(options.transform.column.to ? options.transform.column.to(strings) : strings)\n          : new Builder(strings, args)\n      return query\n    }\n\n    function unsafe(string, args = [], options = {}) {\n      arguments.length === 2 && !Array.isArray(args) && (options = args, args = [])\n      const query = new Query([string], args, handler, cancel, {\n        prepare: false,\n        ...options,\n        simple: 'simple' in options ? options.simple : args.length === 0\n      })\n      return query\n    }\n\n    function file(path, args = [], options = {}) {\n      arguments.length === 2 && !Array.isArray(args) && (options = args, args = [])\n      const query = new Query([], args, (query) => {\n        fs.readFile(path, 'utf8', (err, string) => {\n          if (err)\n            return query.reject(err)\n\n          query.strings = [string]\n          handler(query)\n        })\n      }, cancel, {\n        ...options,\n        simple: 'simple' in options ? options.simple : args.length === 0\n      })\n      return query\n    }\n  }\n\n  async function listen(name, fn, onlisten) {\n    const listener = { fn, onlisten }\n\n    const sql = listen.sql || (listen.sql = Postgres({\n      ...options,\n      max: 1,\n      idle_timeout: null,\n      max_lifetime: null,\n      fetch_types: false,\n      onclose() {\n        Object.entries(listen.channels).forEach(([name, { listeners }]) => {\n          delete listen.channels[name]\n          Promise.all(listeners.map(l => listen(name, l.fn, l.onlisten).catch(() => { /* noop */ })))\n        })\n      },\n      onnotify(c, x) {\n        c in listen.channels && listen.channels[c].listeners.forEach(l => l.fn(x))\n      }\n    }))\n\n    const channels = listen.channels || (listen.channels = {})\n        , exists = name in channels\n\n    if (exists) {\n      channels[name].listeners.push(listener)\n      const result = await channels[name].result\n      listener.onlisten && listener.onlisten()\n      return { state: result.state, unlisten }\n    }\n\n    channels[name] = { result: sql`listen ${\n      sql.unsafe('\"' + name.replace(/\"/g, '\"\"') + '\"')\n    }`, listeners: [listener] }\n    const result = await channels[name].result\n    listener.onlisten && listener.onlisten()\n    return { state: result.state, unlisten }\n\n    async function unlisten() {\n      if (name in channels === false)\n        return\n\n      channels[name].listeners = channels[name].listeners.filter(x => x !== listener)\n      if (channels[name].listeners.length)\n        return\n\n      delete channels[name]\n      return sql`unlisten ${\n        sql.unsafe('\"' + name.replace(/\"/g, '\"\"') + '\"')\n      }`\n    }\n  }\n\n  async function notify(channel, payload) {\n    return await sql`select pg_notify(${ channel }, ${ '' + payload })`\n  }\n\n  async function reserve() {\n    const queue = Queue()\n    const c = open.length\n      ? open.shift()\n      : await new Promise(r => {\n        queries.push({ reserve: r })\n        closed.length && connect(closed.shift())\n      })\n\n    move(c, reserved)\n    c.reserved = () => queue.length\n      ? c.execute(queue.shift())\n      : move(c, reserved)\n    c.reserved.release = true\n\n    const sql = Sql(handler)\n    sql.release = () => {\n      c.reserved = null\n      onopen(c)\n    }\n\n    return sql\n\n    function handler(q) {\n      c.queue === full\n        ? queue.push(q)\n        : c.execute(q) || move(c, full)\n    }\n  }\n\n  async function begin(options, fn) {\n    !fn && (fn = options, options = '')\n    const queries = Queue()\n    let savepoints = 0\n      , connection\n      , prepare = null\n\n    try {\n      await sql.unsafe('begin ' + options.replace(/[^a-z ]/ig, ''), [], { onexecute }).execute()\n      return await Promise.race([\n        scope(connection, fn),\n        new Promise((_, reject) => connection.onclose = reject)\n      ])\n    } catch (error) {\n      throw error\n    }\n\n    async function scope(c, fn, name) {\n      const sql = Sql(handler)\n      sql.savepoint = savepoint\n      sql.prepare = x => prepare = x.replace(/[^a-z0-9$-_. ]/gi)\n      let uncaughtError\n        , result\n\n      name && await sql`savepoint ${ sql(name) }`\n      try {\n        result = await new Promise((resolve, reject) => {\n          const x = fn(sql)\n          Promise.resolve(Array.isArray(x) ? Promise.all(x) : x).then(resolve, reject)\n        })\n\n        if (uncaughtError)\n          throw uncaughtError\n      } catch (e) {\n        await (name\n          ? sql`rollback to ${ sql(name) }`\n          : sql`rollback`\n        )\n        throw e instanceof PostgresError && e.code === '25P02' && uncaughtError || e\n      }\n\n      if (!name) {\n        prepare\n          ? await sql`prepare transaction '${ sql.unsafe(prepare) }'`\n          : await sql`commit`\n      }\n\n      return result\n\n      function savepoint(name, fn) {\n        if (name && Array.isArray(name.raw))\n          return savepoint(sql => sql.apply(sql, arguments))\n\n        arguments.length === 1 && (fn = name, name = null)\n        return scope(c, fn, 's' + savepoints++ + (name ? '_' + name : ''))\n      }\n\n      function handler(q) {\n        q.catch(e => uncaughtError || (uncaughtError = e))\n        c.queue === full\n          ? queries.push(q)\n          : c.execute(q) || move(c, full)\n      }\n    }\n\n    function onexecute(c) {\n      connection = c\n      move(c, reserved)\n      c.reserved = () => queries.length\n        ? c.execute(queries.shift())\n        : move(c, reserved)\n    }\n  }\n\n  function move(c, queue) {\n    c.queue.remove(c)\n    queue.push(c)\n    c.queue = queue\n    queue === open\n      ? c.idleTimer.start()\n      : c.idleTimer.cancel()\n    return c\n  }\n\n  function json(x) {\n    return new Parameter(x, 3802)\n  }\n\n  function array(x, type) {\n    if (!Array.isArray(x))\n      return array(Array.from(arguments))\n\n    return new Parameter(x, type || (x.length ? inferType(x) || 25 : 0), options.shared.typeArrayMap)\n  }\n\n  function handler(query) {\n    if (ending)\n      return query.reject(Errors.connection('CONNECTION_ENDED', options, options))\n\n    if (open.length)\n      return go(open.shift(), query)\n\n    if (closed.length)\n      return connect(closed.shift(), query)\n\n    busy.length\n      ? go(busy.shift(), query)\n      : queries.push(query)\n  }\n\n  function go(c, query) {\n    return c.execute(query)\n      ? move(c, busy)\n      : move(c, full)\n  }\n\n  function cancel(query) {\n    return new Promise((resolve, reject) => {\n      query.state\n        ? query.active\n          ? Connection(options).cancel(query.state, resolve, reject)\n          : query.cancelled = { resolve, reject }\n        : (\n          queries.remove(query),\n          query.cancelled = true,\n          query.reject(Errors.generic('57014', 'canceling statement due to user request')),\n          resolve()\n        )\n    })\n  }\n\n  async function end({ timeout = null } = {}) {\n    if (ending)\n      return ending\n\n    await 1\n    let timer\n    return ending = Promise.race([\n      new Promise(r => timeout !== null && (timer = setTimeout(destroy, timeout * 1000, r))),\n      Promise.all(connections.map(c => c.end()).concat(\n        listen.sql ? listen.sql.end({ timeout: 0 }) : [],\n        subscribe.sql ? subscribe.sql.end({ timeout: 0 }) : []\n      ))\n    ]).then(() => clearTimeout(timer))\n  }\n\n  async function close() {\n    await Promise.all(connections.map(c => c.end()))\n  }\n\n  async function destroy(resolve) {\n    await Promise.all(connections.map(c => c.terminate()))\n    while (queries.length)\n      queries.shift().reject(Errors.connection('CONNECTION_DESTROYED', options))\n    resolve()\n  }\n\n  function connect(c, query) {\n    move(c, connecting)\n    c.connect(query)\n    return c\n  }\n\n  function onend(c) {\n    move(c, ended)\n  }\n\n  function onopen(c) {\n    if (queries.length === 0)\n      return move(c, open)\n\n    let max = Math.ceil(queries.length / (connecting.length + 1))\n      , ready = true\n\n    while (ready && queries.length && max-- > 0) {\n      const query = queries.shift()\n      if (query.reserve)\n        return query.reserve(c)\n\n      ready = c.execute(query)\n    }\n\n    ready\n      ? move(c, busy)\n      : move(c, full)\n  }\n\n  function onclose(c, e) {\n    move(c, closed)\n    c.reserved = null\n    c.onclose && (c.onclose(e), c.onclose = null)\n    options.onclose && options.onclose(c.id)\n    queries.length && connect(c, queries.shift())\n  }\n}\n\nfunction parseOptions(a, b) {\n  if (a && a.shared)\n    return a\n\n  const env = process.env // eslint-disable-line\n      , o = (!a || typeof a === 'string' ? b : a) || {}\n      , { url, multihost } = parseUrl(a)\n      , query = [...url.searchParams].reduce((a, [b, c]) => (a[b] = c, a), {})\n      , host = o.hostname || o.host || multihost || url.hostname || env.PGHOST || 'localhost'\n      , port = o.port || url.port || env.PGPORT || 5432\n      , user = o.user || o.username || url.username || env.PGUSERNAME || env.PGUSER || osUsername()\n\n  o.no_prepare && (o.prepare = false)\n  query.sslmode && (query.ssl = query.sslmode, delete query.sslmode)\n  'timeout' in o && (console.log('The timeout option is deprecated, use idle_timeout instead'), o.idle_timeout = o.timeout) // eslint-disable-line\n  query.sslrootcert === 'system' && (query.ssl = 'verify-full')\n\n  const ints = ['idle_timeout', 'connect_timeout', 'max_lifetime', 'max_pipeline', 'backoff', 'keep_alive']\n  const defaults = {\n    max             : 10,\n    ssl             : false,\n    idle_timeout    : null,\n    connect_timeout : 30,\n    max_lifetime    : max_lifetime,\n    max_pipeline    : 100,\n    backoff         : backoff,\n    keep_alive      : 60,\n    prepare         : true,\n    debug           : false,\n    fetch_types     : true,\n    publications    : 'alltables',\n    target_session_attrs: null\n  }\n\n  return {\n    host            : Array.isArray(host) ? host : host.split(',').map(x => x.split(':')[0]),\n    port            : Array.isArray(port) ? port : host.split(',').map(x => parseInt(x.split(':')[1] || port)),\n    path            : o.path || host.indexOf('/') > -1 && host + '/.s.PGSQL.' + port,\n    database        : o.database || o.db || (url.pathname || '').slice(1) || env.PGDATABASE || user,\n    user            : user,\n    pass            : o.pass || o.password || url.password || env.PGPASSWORD || '',\n    ...Object.entries(defaults).reduce(\n      (acc, [k, d]) => {\n        const value = k in o ? o[k] : k in query\n          ? (query[k] === 'disable' || query[k] === 'false' ? false : query[k])\n          : env['PG' + k.toUpperCase()] || d\n        acc[k] = typeof value === 'string' && ints.includes(k)\n          ? +value\n          : value\n        return acc\n      },\n      {}\n    ),\n    connection      : {\n      application_name: 'postgres.js',\n      ...o.connection,\n      ...Object.entries(query).reduce((acc, [k, v]) => (k in defaults || (acc[k] = v), acc), {})\n    },\n    types           : o.types || {},\n    target_session_attrs: tsa(o, url, env),\n    onnotice        : o.onnotice,\n    onnotify        : o.onnotify,\n    onclose         : o.onclose,\n    onparameter     : o.onparameter,\n    socket          : o.socket,\n    transform       : parseTransform(o.transform || { undefined: undefined }),\n    parameters      : {},\n    shared          : { retries: 0, typeArrayMap: {} },\n    ...mergeUserTypes(o.types)\n  }\n}\n\nfunction tsa(o, url, env) {\n  const x = o.target_session_attrs || url.searchParams.get('target_session_attrs') || env.PGTARGETSESSIONATTRS\n  if (!x || ['read-write', 'read-only', 'primary', 'standby', 'prefer-standby'].includes(x))\n    return x\n\n  throw new Error('target_session_attrs ' + x + ' is not supported')\n}\n\nfunction backoff(retries) {\n  return (0.5 + Math.random() / 2) * Math.min(3 ** retries / 100, 20)\n}\n\nfunction max_lifetime() {\n  return 60 * (30 + Math.random() * 30)\n}\n\nfunction parseTransform(x) {\n  return {\n    undefined: x.undefined,\n    column: {\n      from: typeof x.column === 'function' ? x.column : x.column && x.column.from,\n      to: x.column && x.column.to\n    },\n    value: {\n      from: typeof x.value === 'function' ? x.value : x.value && x.value.from,\n      to: x.value && x.value.to\n    },\n    row: {\n      from: typeof x.row === 'function' ? x.row : x.row && x.row.from,\n      to: x.row && x.row.to\n    }\n  }\n}\n\nfunction parseUrl(url) {\n  if (!url || typeof url !== 'string')\n    return { url: { searchParams: new Map() } }\n\n  let host = url\n  host = host.slice(host.indexOf('://') + 3).split(/[?/]/)[0]\n  host = decodeURIComponent(host.slice(host.indexOf('@') + 1))\n\n  const urlObj = new URL(url.replace(host, host.split(',')[0]))\n\n  return {\n    url: {\n      username: decodeURIComponent(urlObj.username),\n      password: decodeURIComponent(urlObj.password),\n      host: urlObj.host,\n      hostname: urlObj.hostname,\n      port: urlObj.port,\n      pathname: urlObj.pathname,\n      searchParams: urlObj.searchParams\n    },\n    multihost: host.indexOf(',') > -1 && host\n  }\n}\n\nfunction osUsername() {\n  try {\n    return os.userInfo().username // eslint-disable-line\n  } catch (_) {\n    return process.env.USERNAME || process.env.USER || process.env.LOGNAME  // eslint-disable-line\n  }\n}\n", "const originCache = new Map()\n    , originStackCache = new Map()\n    , originError = Symbol('OriginError')\n\nexport const CLOSE = {}\nexport class Query extends Promise {\n  constructor(strings, args, handler, canceller, options = {}) {\n    let resolve\n      , reject\n\n    super((a, b) => {\n      resolve = a\n      reject = b\n    })\n\n    this.tagged = Array.isArray(strings.raw)\n    this.strings = strings\n    this.args = args\n    this.handler = handler\n    this.canceller = canceller\n    this.options = options\n\n    this.state = null\n    this.statement = null\n\n    this.resolve = x => (this.active = false, resolve(x))\n    this.reject = x => (this.active = false, reject(x))\n\n    this.active = false\n    this.cancelled = null\n    this.executed = false\n    this.signature = ''\n\n    this[originError] = this.handler.debug\n      ? new Error()\n      : this.tagged && cachedError(this.strings)\n  }\n\n  get origin() {\n    return (this.handler.debug\n      ? this[originError].stack\n      : this.tagged && originStackCache.has(this.strings)\n        ? originStackCache.get(this.strings)\n        : originStackCache.set(this.strings, this[originError].stack).get(this.strings)\n    ) || ''\n  }\n\n  static get [Symbol.species]() {\n    return Promise\n  }\n\n  cancel() {\n    return this.canceller && (this.canceller(this), this.canceller = null)\n  }\n\n  simple() {\n    this.options.simple = true\n    this.options.prepare = false\n    return this\n  }\n\n  async readable() {\n    this.simple()\n    this.streaming = true\n    return this\n  }\n\n  async writable() {\n    this.simple()\n    this.streaming = true\n    return this\n  }\n\n  cursor(rows = 1, fn) {\n    this.options.simple = false\n    if (typeof rows === 'function') {\n      fn = rows\n      rows = 1\n    }\n\n    this.cursorRows = rows\n\n    if (typeof fn === 'function')\n      return (this.cursorFn = fn, this)\n\n    let prev\n    return {\n      [Symbol.asyncIterator]: () => ({\n        next: () => {\n          if (this.executed && !this.active)\n            return { done: true }\n\n          prev && prev()\n          const promise = new Promise((resolve, reject) => {\n            this.cursorFn = value => {\n              resolve({ value, done: false })\n              return new Promise(r => prev = r)\n            }\n            this.resolve = () => (this.active = false, resolve({ done: true }))\n            this.reject = x => (this.active = false, reject(x))\n          })\n          this.execute()\n          return promise\n        },\n        return() {\n          prev && prev(CLOSE)\n          return { done: true }\n        }\n      })\n    }\n  }\n\n  describe() {\n    this.options.simple = false\n    this.onlyDescribe = this.options.prepare = true\n    return this\n  }\n\n  stream() {\n    throw new Error('.stream has been renamed to .forEach')\n  }\n\n  forEach(fn) {\n    this.forEachFn = fn\n    this.handle()\n    return this\n  }\n\n  raw() {\n    this.isRaw = true\n    return this\n  }\n\n  values() {\n    this.isRaw = 'values'\n    return this\n  }\n\n  async handle() {\n    !this.executed && (this.executed = true) && await 1 && this.handler(this)\n  }\n\n  execute() {\n    this.handle()\n    return this\n  }\n\n  then() {\n    this.handle()\n    return super.then.apply(this, arguments)\n  }\n\n  catch() {\n    this.handle()\n    return super.catch.apply(this, arguments)\n  }\n\n  finally() {\n    this.handle()\n    return super.finally.apply(this, arguments)\n  }\n}\n\nfunction cachedError(xs) {\n  if (originCache.has(xs))\n    return originCache.get(xs)\n\n  const x = Error.stackTraceLimit\n  Error.stackTraceLimit = 4\n  originCache.set(xs, new Error())\n  Error.stackTraceLimit = x\n  return originCache.get(xs)\n}\n", "export class PostgresError extends Error {\n  constructor(x) {\n    super(x.message)\n    this.name = this.constructor.name\n    Object.assign(this, x)\n  }\n}\n\nexport const Errors = {\n  connection,\n  postgres,\n  generic,\n  notSupported\n}\n\nfunction connection(x, options, socket) {\n  const { host, port } = socket || options\n  const error = Object.assign(\n    new Error(('write ' + x + ' ' + (options.path || (host + ':' + port)))),\n    {\n      code: x,\n      errno: x,\n      address: options.path || host\n    }, options.path ? {} : { port: port }\n  )\n  Error.captureStackTrace(error, connection)\n  return error\n}\n\nfunction postgres(x) {\n  const error = new PostgresError(x)\n  Error.captureStackTrace(error, postgres)\n  return error\n}\n\nfunction generic(code, message) {\n  const error = Object.assign(new Error(code + ': ' + message), { code })\n  Error.captureStackTrace(error, generic)\n  return error\n}\n\n/* c8 ignore next 10 */\nfunction notSupported(x) {\n  const error = Object.assign(\n    new Error(x + ' (B) is not supported'),\n    {\n      code: 'MESSAGE_NOT_SUPPORTED',\n      name: x\n    }\n  )\n  Error.captureStackTrace(error, notSupported)\n  return error\n}\n", "import { Query } from './query.js'\nimport { Errors } from './errors.js'\n\nexport const types = {\n  string: {\n    to: 25,\n    from: null,             // defaults to string\n    serialize: x => '' + x\n  },\n  number: {\n    to: 0,\n    from: [21, 23, 26, 700, 701],\n    serialize: x => '' + x,\n    parse: x => +x\n  },\n  json: {\n    to: 114,\n    from: [114, 3802],\n    serialize: x => JSON.stringify(x),\n    parse: x => JSON.parse(x)\n  },\n  boolean: {\n    to: 16,\n    from: 16,\n    serialize: x => x === true ? 't' : 'f',\n    parse: x => x === 't'\n  },\n  date: {\n    to: 1184,\n    from: [1082, 1114, 1184],\n    serialize: x => (x instanceof Date ? x : new Date(x)).toISOString(),\n    parse: x => new Date(x)\n  },\n  bytea: {\n    to: 17,\n    from: 17,\n    serialize: x => '\\\\x' + Buffer.from(x).toString('hex'),\n    parse: x => Buffer.from(x.slice(2), 'hex')\n  }\n}\n\nclass NotTagged { then() { notTagged() } catch() { notTagged() } finally() { notTagged() }}\n\nexport class Identifier extends NotTagged {\n  constructor(value) {\n    super()\n    this.value = escapeIdentifier(value)\n  }\n}\n\nexport class Parameter extends NotTagged {\n  constructor(value, type, array) {\n    super()\n    this.value = value\n    this.type = type\n    this.array = array\n  }\n}\n\nexport class Builder extends NotTagged {\n  constructor(first, rest) {\n    super()\n    this.first = first\n    this.rest = rest\n  }\n\n  build(before, parameters, types, options) {\n    const keyword = builders.map(([x, fn]) => ({ fn, i: before.search(x) })).sort((a, b) => a.i - b.i).pop()\n    return keyword.i === -1\n      ? escapeIdentifiers(this.first, options)\n      : keyword.fn(this.first, this.rest, parameters, types, options)\n  }\n}\n\nexport function handleValue(x, parameters, types, options) {\n  let value = x instanceof Parameter ? x.value : x\n  if (value === undefined) {\n    x instanceof Parameter\n      ? x.value = options.transform.undefined\n      : value = x = options.transform.undefined\n\n    if (value === undefined)\n      throw Errors.generic('UNDEFINED_VALUE', 'Undefined values are not allowed')\n  }\n\n  return '$' + (types.push(\n    x instanceof Parameter\n      ? (parameters.push(x.value), x.array\n        ? x.array[x.type || inferType(x.value)] || x.type || firstIsString(x.value)\n        : x.type\n      )\n      : (parameters.push(x), inferType(x))\n  ))\n}\n\nconst defaultHandlers = typeHandlers(types)\n\nexport function stringify(q, string, value, parameters, types, options) { // eslint-disable-line\n  for (let i = 1; i < q.strings.length; i++) {\n    string += (stringifyValue(string, value, parameters, types, options)) + q.strings[i]\n    value = q.args[i]\n  }\n\n  return string\n}\n\nfunction stringifyValue(string, value, parameters, types, o) {\n  return (\n    value instanceof Builder ? value.build(string, parameters, types, o) :\n    value instanceof Query ? fragment(value, parameters, types, o) :\n    value instanceof Identifier ? value.value :\n    value && value[0] instanceof Query ? value.reduce((acc, x) => acc + ' ' + fragment(x, parameters, types, o), '') :\n    handleValue(value, parameters, types, o)\n  )\n}\n\nfunction fragment(q, parameters, types, options) {\n  q.fragment = true\n  return stringify(q, q.strings[0], q.args[0], parameters, types, options)\n}\n\nfunction valuesBuilder(first, parameters, types, columns, options) {\n  return first.map(row =>\n    '(' + columns.map(column =>\n      stringifyValue('values', row[column], parameters, types, options)\n    ).join(',') + ')'\n  ).join(',')\n}\n\nfunction values(first, rest, parameters, types, options) {\n  const multi = Array.isArray(first[0])\n  const columns = rest.length ? rest.flat() : Object.keys(multi ? first[0] : first)\n  return valuesBuilder(multi ? first : [first], parameters, types, columns, options)\n}\n\nfunction select(first, rest, parameters, types, options) {\n  typeof first === 'string' && (first = [first].concat(rest))\n  if (Array.isArray(first))\n    return escapeIdentifiers(first, options)\n\n  let value\n  const columns = rest.length ? rest.flat() : Object.keys(first)\n  return columns.map(x => {\n    value = first[x]\n    return (\n      value instanceof Query ? fragment(value, parameters, types, options) :\n      value instanceof Identifier ? value.value :\n      handleValue(value, parameters, types, options)\n    ) + ' as ' + escapeIdentifier(options.transform.column.to ? options.transform.column.to(x) : x)\n  }).join(',')\n}\n\nconst builders = Object.entries({\n  values,\n  in: (...xs) => {\n    const x = values(...xs)\n    return x === '()' ? '(null)' : x\n  },\n  select,\n  as: select,\n  returning: select,\n  '\\\\(': select,\n\n  update(first, rest, parameters, types, options) {\n    return (rest.length ? rest.flat() : Object.keys(first)).map(x =>\n      escapeIdentifier(options.transform.column.to ? options.transform.column.to(x) : x) +\n      '=' + stringifyValue('values', first[x], parameters, types, options)\n    )\n  },\n\n  insert(first, rest, parameters, types, options) {\n    const columns = rest.length ? rest.flat() : Object.keys(Array.isArray(first) ? first[0] : first)\n    return '(' + escapeIdentifiers(columns, options) + ')values' +\n    valuesBuilder(Array.isArray(first) ? first : [first], parameters, types, columns, options)\n  }\n}).map(([x, fn]) => ([new RegExp('((?:^|[\\\\s(])' + x + '(?:$|[\\\\s(]))(?![\\\\s\\\\S]*\\\\1)', 'i'), fn]))\n\nfunction notTagged() {\n  throw Errors.generic('NOT_TAGGED_CALL', 'Query not called as a tagged template literal')\n}\n\nexport const serializers = defaultHandlers.serializers\nexport const parsers = defaultHandlers.parsers\n\nexport const END = {}\n\nfunction firstIsString(x) {\n  if (Array.isArray(x))\n    return firstIsString(x[0])\n  return typeof x === 'string' ? 1009 : 0\n}\n\nexport const mergeUserTypes = function(types) {\n  const user = typeHandlers(types || {})\n  return {\n    serializers: Object.assign({}, serializers, user.serializers),\n    parsers: Object.assign({}, parsers, user.parsers)\n  }\n}\n\nfunction typeHandlers(types) {\n  return Object.keys(types).reduce((acc, k) => {\n    types[k].from && [].concat(types[k].from).forEach(x => acc.parsers[x] = types[k].parse)\n    if (types[k].serialize) {\n      acc.serializers[types[k].to] = types[k].serialize\n      types[k].from && [].concat(types[k].from).forEach(x => acc.serializers[x] = types[k].serialize)\n    }\n    return acc\n  }, { parsers: {}, serializers: {} })\n}\n\nfunction escapeIdentifiers(xs, { transform: { column } }) {\n  return xs.map(x => escapeIdentifier(column.to ? column.to(x) : x)).join(',')\n}\n\nexport const escapeIdentifier = function escape(str) {\n  return '\"' + str.replace(/\"/g, '\"\"').replace(/\\./g, '\".\"') + '\"'\n}\n\nexport const inferType = function inferType(x) {\n  return (\n    x instanceof Parameter ? x.type :\n    x instanceof Date ? 1184 :\n    x instanceof Uint8Array ? 17 :\n    (x === true || x === false) ? 16 :\n    typeof x === 'bigint' ? 20 :\n    Array.isArray(x) ? inferType(x[0]) :\n    0\n  )\n}\n\nconst escapeBackslash = /\\\\/g\nconst escapeQuote = /\"/g\n\nfunction arrayEscape(x) {\n  return x\n    .replace(escapeBackslash, '\\\\\\\\')\n    .replace(escapeQuote, '\\\\\"')\n}\n\nexport const arraySerializer = function arraySerializer(xs, serializer, options, typarray) {\n  if (Array.isArray(xs) === false)\n    return xs\n\n  if (!xs.length)\n    return '{}'\n\n  const first = xs[0]\n  // Only _box (1020) has the ';' delimiter for arrays, all other types use the ',' delimiter\n  const delimiter = typarray === 1020 ? ';' : ','\n\n  if (Array.isArray(first) && !first.type)\n    return '{' + xs.map(x => arraySerializer(x, serializer, options, typarray)).join(delimiter) + '}'\n\n  return '{' + xs.map(x => {\n    if (x === undefined) {\n      x = options.transform.undefined\n      if (x === undefined)\n        throw Errors.generic('UNDEFINED_VALUE', 'Undefined values are not allowed')\n    }\n\n    return x === null\n      ? 'null'\n      : '\"' + arrayEscape(serializer ? serializer(x.type ? x.value : x) : '' + x) + '\"'\n  }).join(delimiter) + '}'\n}\n\nconst arrayParserState = {\n  i: 0,\n  char: null,\n  str: '',\n  quoted: false,\n  last: 0\n}\n\nexport const arrayParser = function arrayParser(x, parser, typarray) {\n  arrayParserState.i = arrayParserState.last = 0\n  return arrayParserLoop(arrayParserState, x, parser, typarray)\n}\n\nfunction arrayParserLoop(s, x, parser, typarray) {\n  const xs = []\n  // Only _box (1020) has the ';' delimiter for arrays, all other types use the ',' delimiter\n  const delimiter = typarray === 1020 ? ';' : ','\n  for (; s.i < x.length; s.i++) {\n    s.char = x[s.i]\n    if (s.quoted) {\n      if (s.char === '\\\\') {\n        s.str += x[++s.i]\n      } else if (s.char === '\"') {\n        xs.push(parser ? parser(s.str) : s.str)\n        s.str = ''\n        s.quoted = x[s.i + 1] === '\"'\n        s.last = s.i + 2\n      } else {\n        s.str += s.char\n      }\n    } else if (s.char === '\"') {\n      s.quoted = true\n    } else if (s.char === '{') {\n      s.last = ++s.i\n      xs.push(arrayParserLoop(s, x, parser, typarray))\n    } else if (s.char === '}') {\n      s.quoted = false\n      s.last < s.i && xs.push(parser ? parser(x.slice(s.last, s.i)) : x.slice(s.last, s.i))\n      s.last = s.i + 1\n      break\n    } else if (s.char === delimiter && s.p !== '}' && s.p !== '\"') {\n      xs.push(parser ? parser(x.slice(s.last, s.i)) : x.slice(s.last, s.i))\n      s.last = s.i + 1\n    }\n    s.p = s.char\n  }\n  s.last < s.i && xs.push(parser ? parser(x.slice(s.last, s.i + 1)) : x.slice(s.last, s.i + 1))\n  return xs\n}\n\nexport const toCamel = x => {\n  let str = x[0]\n  for (let i = 1; i < x.length; i++)\n    str += x[i] === '_' ? x[++i].toUpperCase() : x[i]\n  return str\n}\n\nexport const toPascal = x => {\n  let str = x[0].toUpperCase()\n  for (let i = 1; i < x.length; i++)\n    str += x[i] === '_' ? x[++i].toUpperCase() : x[i]\n  return str\n}\n\nexport const toKebab = x => x.replace(/_/g, '-')\n\nexport const fromCamel = x => x.replace(/([A-Z])/g, '_$1').toLowerCase()\nexport const fromPascal = x => (x.slice(0, 1) + x.slice(1).replace(/([A-Z])/g, '_$1')).toLowerCase()\nexport const fromKebab = x => x.replace(/-/g, '_')\n\nfunction createJsonTransform(fn) {\n  return function jsonTransform(x, column) {\n    return typeof x === 'object' && x !== null && (column.type === 114 || column.type === 3802)\n      ? Array.isArray(x)\n        ? x.map(x => jsonTransform(x, column))\n        : Object.entries(x).reduce((acc, [k, v]) => Object.assign(acc, { [fn(k)]: jsonTransform(v, column) }), {})\n      : x\n  }\n}\n\ntoCamel.column = { from: toCamel }\ntoCamel.value = { from: createJsonTransform(toCamel) }\nfromCamel.column = { to: fromCamel }\n\nexport const camel = { ...toCamel }\ncamel.column.to = fromCamel\n\ntoPascal.column = { from: toPascal }\ntoPascal.value = { from: createJsonTransform(toPascal) }\nfromPascal.column = { to: fromPascal }\n\nexport const pascal = { ...toPascal }\npascal.column.to = fromPascal\n\ntoKebab.column = { from: toKebab }\ntoKebab.value = { from: createJsonTransform(toKebab) }\nfromKebab.column = { to: fromKebab }\n\nexport const kebab = { ...toKebab }\nkebab.column.to = fromKebab\n", "import net from 'net'\nimport tls from 'tls'\nimport crypto from 'crypto'\nimport Stream from 'stream'\nimport { performance } from 'perf_hooks'\n\nimport { stringify, handleValue, arrayParser, arraySerializer } from './types.js'\nimport { Errors } from './errors.js'\nimport Result from './result.js'\nimport Queue from './queue.js'\nimport { Query, CLOSE } from './query.js'\nimport b from './bytes.js'\n\nexport default Connection\n\nlet uid = 1\n\nconst Sync = b().S().end()\n    , Flush = b().H().end()\n    , SSLRequest = b().i32(8).i32(80877103).end(8)\n    , ExecuteUnnamed = Buffer.concat([b().E().str(b.N).i32(0).end(), Sync])\n    , DescribeUnnamed = b().D().str('S').str(b.N).end()\n    , noop = () => { /* noop */ }\n\nconst retryRoutines = new Set([\n  'FetchPreparedStatement',\n  'RevalidateCachedQuery',\n  'transformAssignedExpr'\n])\n\nconst errorFields = {\n  83  : 'severity_local',    // S\n  86  : 'severity',          // V\n  67  : 'code',              // C\n  77  : 'message',           // M\n  68  : 'detail',            // D\n  72  : 'hint',              // H\n  80  : 'position',          // P\n  112 : 'internal_position', // p\n  113 : 'internal_query',    // q\n  87  : 'where',             // W\n  115 : 'schema_name',       // s\n  116 : 'table_name',        // t\n  99  : 'column_name',       // c\n  100 : 'data type_name',    // d\n  110 : 'constraint_name',   // n\n  70  : 'file',              // F\n  76  : 'line',              // L\n  82  : 'routine'            // R\n}\n\nfunction Connection(options, queues = {}, { onopen = noop, onend = noop, onclose = noop } = {}) {\n  const {\n    ssl,\n    max,\n    user,\n    host,\n    port,\n    database,\n    parsers,\n    transform,\n    onnotice,\n    onnotify,\n    onparameter,\n    max_pipeline,\n    keep_alive,\n    backoff,\n    target_session_attrs\n  } = options\n\n  const sent = Queue()\n      , id = uid++\n      , backend = { pid: null, secret: null }\n      , idleTimer = timer(end, options.idle_timeout)\n      , lifeTimer = timer(end, options.max_lifetime)\n      , connectTimer = timer(connectTimedOut, options.connect_timeout)\n\n  let socket = null\n    , cancelMessage\n    , result = new Result()\n    , incoming = Buffer.alloc(0)\n    , needsTypes = options.fetch_types\n    , backendParameters = {}\n    , statements = {}\n    , statementId = Math.random().toString(36).slice(2)\n    , statementCount = 1\n    , closedDate = 0\n    , remaining = 0\n    , hostIndex = 0\n    , retries = 0\n    , length = 0\n    , delay = 0\n    , rows = 0\n    , serverSignature = null\n    , nextWriteTimer = null\n    , terminated = false\n    , incomings = null\n    , results = null\n    , initial = null\n    , ending = null\n    , stream = null\n    , chunk = null\n    , ended = null\n    , nonce = null\n    , query = null\n    , final = null\n\n  const connection = {\n    queue: queues.closed,\n    idleTimer,\n    connect(query) {\n      initial = query || true\n      reconnect()\n    },\n    terminate,\n    execute,\n    cancel,\n    end,\n    count: 0,\n    id\n  }\n\n  queues.closed && queues.closed.push(connection)\n\n  return connection\n\n  async function createSocket() {\n    let x\n    try {\n      x = options.socket\n        ? (await Promise.resolve(options.socket(options)))\n        : new net.Socket()\n    } catch (e) {\n      error(e)\n      return\n    }\n    x.on('error', error)\n    x.on('close', closed)\n    x.on('drain', drain)\n    return x\n  }\n\n  async function cancel({ pid, secret }, resolve, reject) {\n    try {\n      cancelMessage = b().i32(16).i32(80877102).i32(pid).i32(secret).end(16)\n      await connect()\n      socket.once('error', reject)\n      socket.once('close', resolve)\n    } catch (error) {\n      reject(error)\n    }\n  }\n\n  function execute(q) {\n    if (terminated)\n      return queryError(q, Errors.connection('CONNECTION_DESTROYED', options))\n\n    if (q.cancelled)\n      return\n\n    try {\n      q.state = backend\n      query\n        ? sent.push(q)\n        : (query = q, query.active = true)\n\n      build(q)\n      return write(toBuffer(q))\n        && !q.describeFirst\n        && !q.cursorFn\n        && sent.length < max_pipeline\n        && (!q.options.onexecute || q.options.onexecute(connection))\n    } catch (error) {\n      sent.length === 0 && write(Sync)\n      errored(error)\n      return true\n    }\n  }\n\n  function toBuffer(q) {\n    if (q.parameters.length >= 65534)\n      throw Errors.generic('MAX_PARAMETERS_EXCEEDED', 'Max number of parameters (65534) exceeded')\n\n    return q.options.simple\n      ? b().Q().str(q.statement.string + b.N).end()\n      : q.describeFirst\n        ? Buffer.concat([describe(q), Flush])\n        : q.prepare\n          ? q.prepared\n            ? prepared(q)\n            : Buffer.concat([describe(q), prepared(q)])\n          : unnamed(q)\n  }\n\n  function describe(q) {\n    return Buffer.concat([\n      Parse(q.statement.string, q.parameters, q.statement.types, q.statement.name),\n      Describe('S', q.statement.name)\n    ])\n  }\n\n  function prepared(q) {\n    return Buffer.concat([\n      Bind(q.parameters, q.statement.types, q.statement.name, q.cursorName),\n      q.cursorFn\n        ? Execute('', q.cursorRows)\n        : ExecuteUnnamed\n    ])\n  }\n\n  function unnamed(q) {\n    return Buffer.concat([\n      Parse(q.statement.string, q.parameters, q.statement.types),\n      DescribeUnnamed,\n      prepared(q)\n    ])\n  }\n\n  function build(q) {\n    const parameters = []\n        , types = []\n\n    const string = stringify(q, q.strings[0], q.args[0], parameters, types, options)\n\n    !q.tagged && q.args.forEach(x => handleValue(x, parameters, types, options))\n\n    q.prepare = options.prepare && ('prepare' in q.options ? q.options.prepare : true)\n    q.string = string\n    q.signature = q.prepare && types + string\n    q.onlyDescribe && (delete statements[q.signature])\n    q.parameters = q.parameters || parameters\n    q.prepared = q.prepare && q.signature in statements\n    q.describeFirst = q.onlyDescribe || (parameters.length && !q.prepared)\n    q.statement = q.prepared\n      ? statements[q.signature]\n      : { string, types, name: q.prepare ? statementId + statementCount++ : '' }\n\n    typeof options.debug === 'function' && options.debug(id, string, parameters, types)\n  }\n\n  function write(x, fn) {\n    chunk = chunk ? Buffer.concat([chunk, x]) : Buffer.from(x)\n    if (fn || chunk.length >= 1024)\n      return nextWrite(fn)\n    nextWriteTimer === null && (nextWriteTimer = setImmediate(nextWrite))\n    return true\n  }\n\n  function nextWrite(fn) {\n    const x = socket.write(chunk, fn)\n    nextWriteTimer !== null && clearImmediate(nextWriteTimer)\n    chunk = nextWriteTimer = null\n    return x\n  }\n\n  function connectTimedOut() {\n    errored(Errors.connection('CONNECT_TIMEOUT', options, socket))\n    socket.destroy()\n  }\n\n  async function secure() {\n    write(SSLRequest)\n    const canSSL = await new Promise(r => socket.once('data', x => r(x[0] === 83))) // S\n\n    if (!canSSL && ssl === 'prefer')\n      return connected()\n\n    socket.removeAllListeners()\n    socket = tls.connect({\n      socket,\n      servername: net.isIP(socket.host) ? undefined : socket.host,\n      ...(ssl === 'require' || ssl === 'allow' || ssl === 'prefer'\n        ? { rejectUnauthorized: false }\n        : ssl === 'verify-full'\n          ? {}\n          : typeof ssl === 'object'\n            ? ssl\n            : {}\n      )\n    })\n    socket.on('secureConnect', connected)\n    socket.on('error', error)\n    socket.on('close', closed)\n    socket.on('drain', drain)\n  }\n\n  /* c8 ignore next 3 */\n  function drain() {\n    !query && onopen(connection)\n  }\n\n  function data(x) {\n    if (incomings) {\n      incomings.push(x)\n      remaining -= x.length\n      if (remaining >= 0)\n        return\n    }\n\n    incoming = incomings\n      ? Buffer.concat(incomings, length - remaining)\n      : incoming.length === 0\n        ? x\n        : Buffer.concat([incoming, x], incoming.length + x.length)\n\n    while (incoming.length > 4) {\n      length = incoming.readUInt32BE(1)\n      if (length >= incoming.length) {\n        remaining = length - incoming.length\n        incomings = [incoming]\n        break\n      }\n\n      try {\n        handle(incoming.subarray(0, length + 1))\n      } catch (e) {\n        query && (query.cursorFn || query.describeFirst) && write(Sync)\n        errored(e)\n      }\n      incoming = incoming.subarray(length + 1)\n      remaining = 0\n      incomings = null\n    }\n  }\n\n  async function connect() {\n    terminated = false\n    backendParameters = {}\n    socket || (socket = await createSocket())\n\n    if (!socket)\n      return\n\n    connectTimer.start()\n\n    if (options.socket)\n      return ssl ? secure() : connected()\n\n    socket.on('connect', ssl ? secure : connected)\n\n    if (options.path)\n      return socket.connect(options.path)\n\n    socket.ssl = ssl\n    socket.connect(port[hostIndex], host[hostIndex])\n    socket.host = host[hostIndex]\n    socket.port = port[hostIndex]\n\n    hostIndex = (hostIndex + 1) % port.length\n  }\n\n  function reconnect() {\n    setTimeout(connect, closedDate ? closedDate + delay - performance.now() : 0)\n  }\n\n  function connected() {\n    try {\n      statements = {}\n      needsTypes = options.fetch_types\n      statementId = Math.random().toString(36).slice(2)\n      statementCount = 1\n      lifeTimer.start()\n      socket.on('data', data)\n      keep_alive && socket.setKeepAlive && socket.setKeepAlive(true, 1000 * keep_alive)\n      const s = StartupMessage()\n      write(s)\n    } catch (err) {\n      error(err)\n    }\n  }\n\n  function error(err) {\n    if (connection.queue === queues.connecting && options.host[retries + 1])\n      return\n\n    errored(err)\n    while (sent.length)\n      queryError(sent.shift(), err)\n  }\n\n  function errored(err) {\n    stream && (stream.destroy(err), stream = null)\n    query && queryError(query, err)\n    initial && (queryError(initial, err), initial = null)\n  }\n\n  function queryError(query, err) {\n    'query' in err || 'parameters' in err || Object.defineProperties(err, {\n      stack: { value: err.stack + query.origin.replace(/.*\\n/, '\\n'), enumerable: options.debug },\n      query: { value: query.string, enumerable: options.debug },\n      parameters: { value: query.parameters, enumerable: options.debug },\n      args: { value: query.args, enumerable: options.debug },\n      types: { value: query.statement && query.statement.types, enumerable: options.debug }\n    })\n    query.reject(err)\n  }\n\n  function end() {\n    return ending || (\n      !connection.reserved && onend(connection),\n      !connection.reserved && !initial && !query && sent.length === 0\n        ? (terminate(), new Promise(r => socket && socket.readyState !== 'closed' ? socket.once('close', r) : r()))\n        : ending = new Promise(r => ended = r)\n    )\n  }\n\n  function terminate() {\n    terminated = true\n    if (stream || query || initial || sent.length)\n      error(Errors.connection('CONNECTION_DESTROYED', options))\n\n    clearImmediate(nextWriteTimer)\n    if (socket) {\n      socket.removeListener('data', data)\n      socket.removeListener('connect', connected)\n      socket.readyState === 'open' && socket.end(b().X().end())\n    }\n    ended && (ended(), ending = ended = null)\n  }\n\n  async function closed(hadError) {\n    incoming = Buffer.alloc(0)\n    remaining = 0\n    incomings = null\n    clearImmediate(nextWriteTimer)\n    socket.removeListener('data', data)\n    socket.removeListener('connect', connected)\n    idleTimer.cancel()\n    lifeTimer.cancel()\n    connectTimer.cancel()\n\n    socket.removeAllListeners()\n    socket = null\n\n    if (initial)\n      return reconnect()\n\n    !hadError && (query || sent.length) && error(Errors.connection('CONNECTION_CLOSED', options, socket))\n    closedDate = performance.now()\n    hadError && options.shared.retries++\n    delay = (typeof backoff === 'function' ? backoff(options.shared.retries) : backoff) * 1000\n    onclose(connection, Errors.connection('CONNECTION_CLOSED', options, socket))\n  }\n\n  /* Handlers */\n  function handle(xs, x = xs[0]) {\n    (\n      x === 68 ? DataRow :                   // D\n      x === 100 ? CopyData :                 // d\n      x === 65 ? NotificationResponse :      // A\n      x === 83 ? ParameterStatus :           // S\n      x === 90 ? ReadyForQuery :             // Z\n      x === 67 ? CommandComplete :           // C\n      x === 50 ? BindComplete :              // 2\n      x === 49 ? ParseComplete :             // 1\n      x === 116 ? ParameterDescription :     // t\n      x === 84 ? RowDescription :            // T\n      x === 82 ? Authentication :            // R\n      x === 110 ? NoData :                   // n\n      x === 75 ? BackendKeyData :            // K\n      x === 69 ? ErrorResponse :             // E\n      x === 115 ? PortalSuspended :          // s\n      x === 51 ? CloseComplete :             // 3\n      x === 71 ? CopyInResponse :            // G\n      x === 78 ? NoticeResponse :            // N\n      x === 72 ? CopyOutResponse :           // H\n      x === 99 ? CopyDone :                  // c\n      x === 73 ? EmptyQueryResponse :        // I\n      x === 86 ? FunctionCallResponse :      // V\n      x === 118 ? NegotiateProtocolVersion : // v\n      x === 87 ? CopyBothResponse :          // W\n      /* c8 ignore next */\n      UnknownMessage\n    )(xs)\n  }\n\n  function DataRow(x) {\n    let index = 7\n    let length\n    let column\n    let value\n\n    const row = query.isRaw ? new Array(query.statement.columns.length) : {}\n    for (let i = 0; i < query.statement.columns.length; i++) {\n      column = query.statement.columns[i]\n      length = x.readInt32BE(index)\n      index += 4\n\n      value = length === -1\n        ? null\n        : query.isRaw === true\n          ? x.subarray(index, index += length)\n          : column.parser === undefined\n            ? x.toString('utf8', index, index += length)\n            : column.parser.array === true\n              ? column.parser(x.toString('utf8', index + 1, index += length))\n              : column.parser(x.toString('utf8', index, index += length))\n\n      query.isRaw\n        ? (row[i] = query.isRaw === true\n          ? value\n          : transform.value.from ? transform.value.from(value, column) : value)\n        : (row[column.name] = transform.value.from ? transform.value.from(value, column) : value)\n    }\n\n    query.forEachFn\n      ? query.forEachFn(transform.row.from ? transform.row.from(row) : row, result)\n      : (result[rows++] = transform.row.from ? transform.row.from(row) : row)\n  }\n\n  function ParameterStatus(x) {\n    const [k, v] = x.toString('utf8', 5, x.length - 1).split(b.N)\n    backendParameters[k] = v\n    if (options.parameters[k] !== v) {\n      options.parameters[k] = v\n      onparameter && onparameter(k, v)\n    }\n  }\n\n  function ReadyForQuery(x) {\n    query && query.options.simple && query.resolve(results || result)\n    query = results = null\n    result = new Result()\n    connectTimer.cancel()\n\n    if (initial) {\n      if (target_session_attrs) {\n        if (!backendParameters.in_hot_standby || !backendParameters.default_transaction_read_only)\n          return fetchState()\n        else if (tryNext(target_session_attrs, backendParameters))\n          return terminate()\n      }\n\n      if (needsTypes) {\n        initial === true && (initial = null)\n        return fetchArrayTypes()\n      }\n\n      initial !== true && execute(initial)\n      options.shared.retries = retries = 0\n      initial = null\n      return\n    }\n\n    while (sent.length && (query = sent.shift()) && (query.active = true, query.cancelled))\n      Connection(options).cancel(query.state, query.cancelled.resolve, query.cancelled.reject)\n\n    if (query)\n      return // Consider opening if able and sent.length < 50\n\n    connection.reserved\n      ? !connection.reserved.release && x[5] === 73 // I\n        ? ending\n          ? terminate()\n          : (connection.reserved = null, onopen(connection))\n        : connection.reserved()\n      : ending\n        ? terminate()\n        : onopen(connection)\n  }\n\n  function CommandComplete(x) {\n    rows = 0\n\n    for (let i = x.length - 1; i > 0; i--) {\n      if (x[i] === 32 && x[i + 1] < 58 && result.count === null)\n        result.count = +x.toString('utf8', i + 1, x.length - 1)\n      if (x[i - 1] >= 65) {\n        result.command = x.toString('utf8', 5, i)\n        result.state = backend\n        break\n      }\n    }\n\n    final && (final(), final = null)\n\n    if (result.command === 'BEGIN' && max !== 1 && !connection.reserved)\n      return errored(Errors.generic('UNSAFE_TRANSACTION', 'Only use sql.begin, sql.reserved or max: 1'))\n\n    if (query.options.simple)\n      return BindComplete()\n\n    if (query.cursorFn) {\n      result.count && query.cursorFn(result)\n      write(Sync)\n    }\n\n    query.resolve(result)\n  }\n\n  function ParseComplete() {\n    query.parsing = false\n  }\n\n  function BindComplete() {\n    !result.statement && (result.statement = query.statement)\n    result.columns = query.statement.columns\n  }\n\n  function ParameterDescription(x) {\n    const length = x.readUInt16BE(5)\n\n    for (let i = 0; i < length; ++i)\n      !query.statement.types[i] && (query.statement.types[i] = x.readUInt32BE(7 + i * 4))\n\n    query.prepare && (statements[query.signature] = query.statement)\n    query.describeFirst && !query.onlyDescribe && (write(prepared(query)), query.describeFirst = false)\n  }\n\n  function RowDescription(x) {\n    if (result.command) {\n      results = results || [result]\n      results.push(result = new Result())\n      result.count = null\n      query.statement.columns = null\n    }\n\n    const length = x.readUInt16BE(5)\n    let index = 7\n    let start\n\n    query.statement.columns = Array(length)\n\n    for (let i = 0; i < length; ++i) {\n      start = index\n      while (x[index++] !== 0);\n      const table = x.readUInt32BE(index)\n      const number = x.readUInt16BE(index + 4)\n      const type = x.readUInt32BE(index + 6)\n      query.statement.columns[i] = {\n        name: transform.column.from\n          ? transform.column.from(x.toString('utf8', start, index - 1))\n          : x.toString('utf8', start, index - 1),\n        parser: parsers[type],\n        table,\n        number,\n        type\n      }\n      index += 18\n    }\n\n    result.statement = query.statement\n    if (query.onlyDescribe)\n      return (query.resolve(query.statement), write(Sync))\n  }\n\n  async function Authentication(x, type = x.readUInt32BE(5)) {\n    (\n      type === 3 ? AuthenticationCleartextPassword :\n      type === 5 ? AuthenticationMD5Password :\n      type === 10 ? SASL :\n      type === 11 ? SASLContinue :\n      type === 12 ? SASLFinal :\n      type !== 0 ? UnknownAuth :\n      noop\n    )(x, type)\n  }\n\n  /* c8 ignore next 5 */\n  async function AuthenticationCleartextPassword() {\n    const payload = await Pass()\n    write(\n      b().p().str(payload).z(1).end()\n    )\n  }\n\n  async function AuthenticationMD5Password(x) {\n    const payload = 'md5' + (\n      await md5(\n        Buffer.concat([\n          Buffer.from(await md5((await Pass()) + user)),\n          x.subarray(9)\n        ])\n      )\n    )\n    write(\n      b().p().str(payload).z(1).end()\n    )\n  }\n\n  async function SASL() {\n    nonce = (await crypto.randomBytes(18)).toString('base64')\n    b().p().str('SCRAM-SHA-256' + b.N)\n    const i = b.i\n    write(b.inc(4).str('n,,n=*,r=' + nonce).i32(b.i - i - 4, i).end())\n  }\n\n  async function SASLContinue(x) {\n    const res = x.toString('utf8', 9).split(',').reduce((acc, x) => (acc[x[0]] = x.slice(2), acc), {})\n\n    const saltedPassword = await crypto.pbkdf2Sync(\n      await Pass(),\n      Buffer.from(res.s, 'base64'),\n      parseInt(res.i), 32,\n      'sha256'\n    )\n\n    const clientKey = await hmac(saltedPassword, 'Client Key')\n\n    const auth = 'n=*,r=' + nonce + ','\n               + 'r=' + res.r + ',s=' + res.s + ',i=' + res.i\n               + ',c=biws,r=' + res.r\n\n    serverSignature = (await hmac(await hmac(saltedPassword, 'Server Key'), auth)).toString('base64')\n\n    const payload = 'c=biws,r=' + res.r + ',p=' + xor(\n      clientKey, Buffer.from(await hmac(await sha256(clientKey), auth))\n    ).toString('base64')\n\n    write(\n      b().p().str(payload).end()\n    )\n  }\n\n  function SASLFinal(x) {\n    if (x.toString('utf8', 9).split(b.N, 1)[0].slice(2) === serverSignature)\n      return\n    /* c8 ignore next 5 */\n    errored(Errors.generic('SASL_SIGNATURE_MISMATCH', 'The server did not return the correct signature'))\n    socket.destroy()\n  }\n\n  function Pass() {\n    return Promise.resolve(typeof options.pass === 'function'\n      ? options.pass()\n      : options.pass\n    )\n  }\n\n  function NoData() {\n    result.statement = query.statement\n    result.statement.columns = []\n    if (query.onlyDescribe)\n      return (query.resolve(query.statement), write(Sync))\n  }\n\n  function BackendKeyData(x) {\n    backend.pid = x.readUInt32BE(5)\n    backend.secret = x.readUInt32BE(9)\n  }\n\n  async function fetchArrayTypes() {\n    needsTypes = false\n    const types = await new Query([`\n      select b.oid, b.typarray\n      from pg_catalog.pg_type a\n      left join pg_catalog.pg_type b on b.oid = a.typelem\n      where a.typcategory = 'A'\n      group by b.oid, b.typarray\n      order by b.oid\n    `], [], execute)\n    types.forEach(({ oid, typarray }) => addArrayType(oid, typarray))\n  }\n\n  function addArrayType(oid, typarray) {\n    if (!!options.parsers[typarray] && !!options.serializers[typarray]) return\n    const parser = options.parsers[oid]\n    options.shared.typeArrayMap[oid] = typarray\n    options.parsers[typarray] = (xs) => arrayParser(xs, parser, typarray)\n    options.parsers[typarray].array = true\n    options.serializers[typarray] = (xs) => arraySerializer(xs, options.serializers[oid], options, typarray)\n  }\n\n  function tryNext(x, xs) {\n    return (\n      (x === 'read-write' && xs.default_transaction_read_only === 'on') ||\n      (x === 'read-only' && xs.default_transaction_read_only === 'off') ||\n      (x === 'primary' && xs.in_hot_standby === 'on') ||\n      (x === 'standby' && xs.in_hot_standby === 'off') ||\n      (x === 'prefer-standby' && xs.in_hot_standby === 'off' && options.host[retries])\n    )\n  }\n\n  function fetchState() {\n    const query = new Query([`\n      show transaction_read_only;\n      select pg_catalog.pg_is_in_recovery()\n    `], [], execute, null, { simple: true })\n    query.resolve = ([[a], [b]]) => {\n      backendParameters.default_transaction_read_only = a.transaction_read_only\n      backendParameters.in_hot_standby = b.pg_is_in_recovery ? 'on' : 'off'\n    }\n    query.execute()\n  }\n\n  function ErrorResponse(x) {\n    query && (query.cursorFn || query.describeFirst) && write(Sync)\n    const error = Errors.postgres(parseError(x))\n    query && query.retried\n      ? errored(query.retried)\n      : query && query.prepared && retryRoutines.has(error.routine)\n        ? retry(query, error)\n        : errored(error)\n  }\n\n  function retry(q, error) {\n    delete statements[q.signature]\n    q.retried = error\n    execute(q)\n  }\n\n  function NotificationResponse(x) {\n    if (!onnotify)\n      return\n\n    let index = 9\n    while (x[index++] !== 0);\n    onnotify(\n      x.toString('utf8', 9, index - 1),\n      x.toString('utf8', index, x.length - 1)\n    )\n  }\n\n  async function PortalSuspended() {\n    try {\n      const x = await Promise.resolve(query.cursorFn(result))\n      rows = 0\n      x === CLOSE\n        ? write(Close(query.portal))\n        : (result = new Result(), write(Execute('', query.cursorRows)))\n    } catch (err) {\n      write(Sync)\n      query.reject(err)\n    }\n  }\n\n  function CloseComplete() {\n    result.count && query.cursorFn(result)\n    query.resolve(result)\n  }\n\n  function CopyInResponse() {\n    stream = new Stream.Writable({\n      autoDestroy: true,\n      write(chunk, encoding, callback) {\n        socket.write(b().d().raw(chunk).end(), callback)\n      },\n      destroy(error, callback) {\n        callback(error)\n        socket.write(b().f().str(error + b.N).end())\n        stream = null\n      },\n      final(callback) {\n        socket.write(b().c().end())\n        final = callback\n      }\n    })\n    query.resolve(stream)\n  }\n\n  function CopyOutResponse() {\n    stream = new Stream.Readable({\n      read() { socket.resume() }\n    })\n    query.resolve(stream)\n  }\n\n  /* c8 ignore next 3 */\n  function CopyBothResponse() {\n    stream = new Stream.Duplex({\n      autoDestroy: true,\n      read() { socket.resume() },\n      /* c8 ignore next 11 */\n      write(chunk, encoding, callback) {\n        socket.write(b().d().raw(chunk).end(), callback)\n      },\n      destroy(error, callback) {\n        callback(error)\n        socket.write(b().f().str(error + b.N).end())\n        stream = null\n      },\n      final(callback) {\n        socket.write(b().c().end())\n        final = callback\n      }\n    })\n    query.resolve(stream)\n  }\n\n  function CopyData(x) {\n    stream && (stream.push(x.subarray(5)) || socket.pause())\n  }\n\n  function CopyDone() {\n    stream && stream.push(null)\n    stream = null\n  }\n\n  function NoticeResponse(x) {\n    onnotice\n      ? onnotice(parseError(x))\n      : console.log(parseError(x)) // eslint-disable-line\n\n  }\n\n  /* c8 ignore next 3 */\n  function EmptyQueryResponse() {\n    /* noop */\n  }\n\n  /* c8 ignore next 3 */\n  function FunctionCallResponse() {\n    errored(Errors.notSupported('FunctionCallResponse'))\n  }\n\n  /* c8 ignore next 3 */\n  function NegotiateProtocolVersion() {\n    errored(Errors.notSupported('NegotiateProtocolVersion'))\n  }\n\n  /* c8 ignore next 3 */\n  function UnknownMessage(x) {\n    console.error('Postgres.js : Unknown Message:', x[0]) // eslint-disable-line\n  }\n\n  /* c8 ignore next 3 */\n  function UnknownAuth(x, type) {\n    console.error('Postgres.js : Unknown Auth:', type) // eslint-disable-line\n  }\n\n  /* Messages */\n  function Bind(parameters, types, statement = '', portal = '') {\n    let prev\n      , type\n\n    b().B().str(portal + b.N).str(statement + b.N).i16(0).i16(parameters.length)\n\n    parameters.forEach((x, i) => {\n      if (x === null)\n        return b.i32(0xFFFFFFFF)\n\n      type = types[i]\n      parameters[i] = x = type in options.serializers\n        ? options.serializers[type](x)\n        : '' + x\n\n      prev = b.i\n      b.inc(4).str(x).i32(b.i - prev - 4, prev)\n    })\n\n    b.i16(0)\n\n    return b.end()\n  }\n\n  function Parse(str, parameters, types, name = '') {\n    b().P().str(name + b.N).str(str + b.N).i16(parameters.length)\n    parameters.forEach((x, i) => b.i32(types[i] || 0))\n    return b.end()\n  }\n\n  function Describe(x, name = '') {\n    return b().D().str(x).str(name + b.N).end()\n  }\n\n  function Execute(portal = '', rows = 0) {\n    return Buffer.concat([\n      b().E().str(portal + b.N).i32(rows).end(),\n      Flush\n    ])\n  }\n\n  function Close(portal = '') {\n    return Buffer.concat([\n      b().C().str('P').str(portal + b.N).end(),\n      b().S().end()\n    ])\n  }\n\n  function StartupMessage() {\n    return cancelMessage || b().inc(4).i16(3).z(2).str(\n      Object.entries(Object.assign({\n        user,\n        database,\n        client_encoding: 'UTF8'\n      },\n        options.connection\n      )).filter(([, v]) => v).map(([k, v]) => k + b.N + v).join(b.N)\n    ).z(2).end(0)\n  }\n\n}\n\nfunction parseError(x) {\n  const error = {}\n  let start = 5\n  for (let i = 5; i < x.length - 1; i++) {\n    if (x[i] === 0) {\n      error[errorFields[x[start]]] = x.toString('utf8', start + 1, i)\n      start = i + 1\n    }\n  }\n  return error\n}\n\nfunction md5(x) {\n  return crypto.createHash('md5').update(x).digest('hex')\n}\n\nfunction hmac(key, x) {\n  return crypto.createHmac('sha256', key).update(x).digest()\n}\n\nfunction sha256(x) {\n  return crypto.createHash('sha256').update(x).digest()\n}\n\nfunction xor(a, b) {\n  const length = Math.max(a.length, b.length)\n  const buffer = Buffer.allocUnsafe(length)\n  for (let i = 0; i < length; i++)\n    buffer[i] = a[i] ^ b[i]\n  return buffer\n}\n\nfunction timer(fn, seconds) {\n  seconds = typeof seconds === 'function' ? seconds() : seconds\n  if (!seconds)\n    return { cancel: noop, start: noop }\n\n  let timer\n  return {\n    cancel() {\n      timer && (clearTimeout(timer), timer = null)\n    },\n    start() {\n      timer && clearTimeout(timer)\n      timer = setTimeout(done, seconds * 1000, arguments)\n    }\n  }\n\n  function done(args) {\n    fn.apply(null, args)\n    timer = null\n  }\n}\n", "export default class Result extends Array {\n  constructor() {\n    super()\n    Object.defineProperties(this, {\n      count: { value: null, writable: true },\n      state: { value: null, writable: true },\n      command: { value: null, writable: true },\n      columns: { value: null, writable: true },\n      statement: { value: null, writable: true }\n    })\n  }\n\n  static get [Symbol.species]() {\n    return Array\n  }\n}\n", "export default Queue\n\nfunction Queue(initial = []) {\n  let xs = initial.slice()\n  let index = 0\n\n  return {\n    get length() {\n      return xs.length - index\n    },\n    remove: (x) => {\n      const index = xs.indexOf(x)\n      return index === -1\n        ? null\n        : (xs.splice(index, 1), x)\n    },\n    push: (x) => (xs.push(x), x),\n    shift: () => {\n      const out = xs[index++]\n\n      if (index === xs.length) {\n        index = 0\n        xs = []\n      } else {\n        xs[index - 1] = undefined\n      }\n\n      return out\n    }\n  }\n}\n", "const size = 256\nlet buffer = Buffer.allocUnsafe(size)\n\nconst messages = 'BCcDdEFfHPpQSX'.split('').reduce((acc, x) => {\n  const v = x.charCodeAt(0)\n  acc[x] = () => {\n    buffer[0] = v\n    b.i = 5\n    return b\n  }\n  return acc\n}, {})\n\nconst b = Object.assign(reset, messages, {\n  N: String.fromCharCode(0),\n  i: 0,\n  inc(x) {\n    b.i += x\n    return b\n  },\n  str(x) {\n    const length = Buffer.byteLength(x)\n    fit(length)\n    b.i += buffer.write(x, b.i, length, 'utf8')\n    return b\n  },\n  i16(x) {\n    fit(2)\n    buffer.writeUInt16BE(x, b.i)\n    b.i += 2\n    return b\n  },\n  i32(x, i) {\n    if (i || i === 0) {\n      buffer.writeUInt32BE(x, i)\n      return b\n    }\n    fit(4)\n    buffer.writeUInt32BE(x, b.i)\n    b.i += 4\n    return b\n  },\n  z(x) {\n    fit(x)\n    buffer.fill(0, b.i, b.i + x)\n    b.i += x\n    return b\n  },\n  raw(x) {\n    buffer = Buffer.concat([buffer.subarray(0, b.i), x])\n    b.i = buffer.length\n    return b\n  },\n  end(at = 1) {\n    buffer.writeUInt32BE(b.i - at, at)\n    const out = buffer.subarray(0, b.i)\n    b.i = 0\n    buffer = Buffer.allocUnsafe(size)\n    return out\n  }\n})\n\nexport default b\n\nfunction fit(x) {\n  if (buffer.length - b.i < x) {\n    const prev = buffer\n        , length = prev.length\n\n    buffer = Buffer.allocUnsafe(length + (length >> 1) + x)\n    prev.copy(buffer)\n  }\n}\n\nfunction reset() {\n  b.i = 0\n  return b\n}\n", "const noop = () => { /* noop */ }\n\nexport default function Subscribe(postgres, options) {\n  const subscribers = new Map()\n      , slot = 'postgresjs_' + Math.random().toString(36).slice(2)\n      , state = {}\n\n  let connection\n    , stream\n    , ended = false\n\n  const sql = subscribe.sql = postgres({\n    ...options,\n    transform: { column: {}, value: {}, row: {} },\n    max: 1,\n    fetch_types: false,\n    idle_timeout: null,\n    max_lifetime: null,\n    connection: {\n      ...options.connection,\n      replication: 'database'\n    },\n    onclose: async function() {\n      if (ended)\n        return\n      stream = null\n      state.pid = state.secret = undefined\n      connected(await init(sql, slot, options.publications))\n      subscribers.forEach(event => event.forEach(({ onsubscribe }) => onsubscribe()))\n    },\n    no_subscribe: true\n  })\n\n  const end = sql.end\n      , close = sql.close\n\n  sql.end = async() => {\n    ended = true\n    stream && (await new Promise(r => (stream.once('close', r), stream.end())))\n    return end()\n  }\n\n  sql.close = async() => {\n    stream && (await new Promise(r => (stream.once('close', r), stream.end())))\n    return close()\n  }\n\n  return subscribe\n\n  async function subscribe(event, fn, onsubscribe = noop, onerror = noop) {\n    event = parseEvent(event)\n\n    if (!connection)\n      connection = init(sql, slot, options.publications)\n\n    const subscriber = { fn, onsubscribe }\n    const fns = subscribers.has(event)\n      ? subscribers.get(event).add(subscriber)\n      : subscribers.set(event, new Set([subscriber])).get(event)\n\n    const unsubscribe = () => {\n      fns.delete(subscriber)\n      fns.size === 0 && subscribers.delete(event)\n    }\n\n    return connection.then(x => {\n      connected(x)\n      onsubscribe()\n      stream && stream.on('error', onerror)\n      return { unsubscribe, state, sql }\n    })\n  }\n\n  function connected(x) {\n    stream = x.stream\n    state.pid = x.state.pid\n    state.secret = x.state.secret\n  }\n\n  async function init(sql, slot, publications) {\n    if (!publications)\n      throw new Error('Missing publication names')\n\n    const xs = await sql.unsafe(\n      `CREATE_REPLICATION_SLOT ${ slot } TEMPORARY LOGICAL pgoutput NOEXPORT_SNAPSHOT`\n    )\n\n    const [x] = xs\n\n    const stream = await sql.unsafe(\n      `START_REPLICATION SLOT ${ slot } LOGICAL ${\n        x.consistent_point\n      } (proto_version '1', publication_names '${ publications }')`\n    ).writable()\n\n    const state = {\n      lsn: Buffer.concat(x.consistent_point.split('/').map(x => Buffer.from(('00000000' + x).slice(-8), 'hex')))\n    }\n\n    stream.on('data', data)\n    stream.on('error', error)\n    stream.on('close', sql.close)\n\n    return { stream, state: xs.state }\n\n    function error(e) {\n      console.error('Unexpected error during logical streaming - reconnecting', e) // eslint-disable-line\n    }\n\n    function data(x) {\n      if (x[0] === 0x77) {\n        parse(x.subarray(25), state, sql.options.parsers, handle, options.transform)\n      } else if (x[0] === 0x6b && x[17]) {\n        state.lsn = x.subarray(1, 9)\n        pong()\n      }\n    }\n\n    function handle(a, b) {\n      const path = b.relation.schema + '.' + b.relation.table\n      call('*', a, b)\n      call('*:' + path, a, b)\n      b.relation.keys.length && call('*:' + path + '=' + b.relation.keys.map(x => a[x.name]), a, b)\n      call(b.command, a, b)\n      call(b.command + ':' + path, a, b)\n      b.relation.keys.length && call(b.command + ':' + path + '=' + b.relation.keys.map(x => a[x.name]), a, b)\n    }\n\n    function pong() {\n      const x = Buffer.alloc(34)\n      x[0] = 'r'.charCodeAt(0)\n      x.fill(state.lsn, 1)\n      x.writeBigInt64BE(BigInt(Date.now() - Date.UTC(2000, 0, 1)) * BigInt(1000), 25)\n      stream.write(x)\n    }\n  }\n\n  function call(x, a, b) {\n    subscribers.has(x) && subscribers.get(x).forEach(({ fn }) => fn(a, b, x))\n  }\n}\n\nfunction Time(x) {\n  return new Date(Date.UTC(2000, 0, 1) + Number(x / BigInt(1000)))\n}\n\nfunction parse(x, state, parsers, handle, transform) {\n  const char = (acc, [k, v]) => (acc[k.charCodeAt(0)] = v, acc)\n\n  Object.entries({\n    R: x => {  // Relation\n      let i = 1\n      const r = state[x.readUInt32BE(i)] = {\n        schema: x.toString('utf8', i += 4, i = x.indexOf(0, i)) || 'pg_catalog',\n        table: x.toString('utf8', i + 1, i = x.indexOf(0, i + 1)),\n        columns: Array(x.readUInt16BE(i += 2)),\n        keys: []\n      }\n      i += 2\n\n      let columnIndex = 0\n        , column\n\n      while (i < x.length) {\n        column = r.columns[columnIndex++] = {\n          key: x[i++],\n          name: transform.column.from\n            ? transform.column.from(x.toString('utf8', i, i = x.indexOf(0, i)))\n            : x.toString('utf8', i, i = x.indexOf(0, i)),\n          type: x.readUInt32BE(i += 1),\n          parser: parsers[x.readUInt32BE(i)],\n          atttypmod: x.readUInt32BE(i += 4)\n        }\n\n        column.key && r.keys.push(column)\n        i += 4\n      }\n    },\n    Y: () => { /* noop */ }, // Type\n    O: () => { /* noop */ }, // Origin\n    B: x => { // Begin\n      state.date = Time(x.readBigInt64BE(9))\n      state.lsn = x.subarray(1, 9)\n    },\n    I: x => { // Insert\n      let i = 1\n      const relation = state[x.readUInt32BE(i)]\n      const { row } = tuples(x, relation.columns, i += 7, transform)\n\n      handle(row, {\n        command: 'insert',\n        relation\n      })\n    },\n    D: x => { // Delete\n      let i = 1\n      const relation = state[x.readUInt32BE(i)]\n      i += 4\n      const key = x[i] === 75\n      handle(key || x[i] === 79\n        ? tuples(x, relation.columns, i += 3, transform).row\n        : null\n      , {\n        command: 'delete',\n        relation,\n        key\n      })\n    },\n    U: x => { // Update\n      let i = 1\n      const relation = state[x.readUInt32BE(i)]\n      i += 4\n      const key = x[i] === 75\n      const xs = key || x[i] === 79\n        ? tuples(x, relation.columns, i += 3, transform)\n        : null\n\n      xs && (i = xs.i)\n\n      const { row } = tuples(x, relation.columns, i + 3, transform)\n\n      handle(row, {\n        command: 'update',\n        relation,\n        key,\n        old: xs && xs.row\n      })\n    },\n    T: () => { /* noop */ }, // Truncate,\n    C: () => { /* noop */ }  // Commit\n  }).reduce(char, {})[x[0]](x)\n}\n\nfunction tuples(x, columns, xi, transform) {\n  let type\n    , column\n    , value\n\n  const row = transform.raw ? new Array(columns.length) : {}\n  for (let i = 0; i < columns.length; i++) {\n    type = x[xi++]\n    column = columns[i]\n    value = type === 110 // n\n      ? null\n      : type === 117 // u\n        ? undefined\n        : column.parser === undefined\n          ? x.toString('utf8', xi + 4, xi += 4 + x.readUInt32BE(xi))\n          : column.parser.array === true\n            ? column.parser(x.toString('utf8', xi + 5, xi += 4 + x.readUInt32BE(xi)))\n            : column.parser(x.toString('utf8', xi + 4, xi += 4 + x.readUInt32BE(xi)))\n\n    transform.raw\n      ? (row[i] = transform.raw === true\n        ? value\n        : transform.value.from ? transform.value.from(value, column) : value)\n      : (row[column.name] = transform.value.from\n        ? transform.value.from(value, column)\n        : value\n      )\n  }\n\n  return { i: xi, row: transform.row.from ? transform.row.from(row) : row }\n}\n\nfunction parseEvent(x) {\n  const xs = x.match(/^(\\*|insert|update|delete)?:?([^.]+?\\.?[^=]+)?=?(.+)?/i) || []\n\n  if (!xs)\n    throw new Error('Malformed subscribe pattern: ' + x)\n\n  const [, command, path, key] = xs\n\n  return (command || '*')\n       + (path ? ':' + (path.indexOf('.') === -1 ? 'public.' + path : path) : '')\n       + (key ? '=' + key : '')\n}\n", "import Stream from 'stream'\n\nexport default function largeObject(sql, oid, mode = 0x00020000 | 0x00040000) {\n  return new Promise(async(resolve, reject) => {\n    await sql.begin(async sql => {\n      let finish\n      !oid && ([{ oid }] = await sql`select lo_creat(-1) as oid`)\n      const [{ fd }] = await sql`select lo_open(${ oid }, ${ mode }) as fd`\n\n      const lo = {\n        writable,\n        readable,\n        close     : () => sql`select lo_close(${ fd })`.then(finish),\n        tell      : () => sql`select lo_tell64(${ fd })`,\n        read      : (x) => sql`select loread(${ fd }, ${ x }) as data`,\n        write     : (x) => sql`select lowrite(${ fd }, ${ x })`,\n        truncate  : (x) => sql`select lo_truncate64(${ fd }, ${ x })`,\n        seek      : (x, whence = 0) => sql`select lo_lseek64(${ fd }, ${ x }, ${ whence })`,\n        size      : () => sql`\n          select\n            lo_lseek64(${ fd }, location, 0) as position,\n            seek.size\n          from (\n            select\n              lo_lseek64($1, 0, 2) as size,\n              tell.location\n            from (select lo_tell64($1) as location) tell\n          ) seek\n        `\n      }\n\n      resolve(lo)\n\n      return new Promise(async r => finish = r)\n\n      async function readable({\n        highWaterMark = 2048 * 8,\n        start = 0,\n        end = Infinity\n      } = {}) {\n        let max = end - start\n        start && await lo.seek(start)\n        return new Stream.Readable({\n          highWaterMark,\n          async read(size) {\n            const l = size > max ? size - max : size\n            max -= size\n            const [{ data }] = await lo.read(l)\n            this.push(data)\n            if (data.length < size)\n              this.push(null)\n          }\n        })\n      }\n\n      async function writable({\n        highWaterMark = 2048 * 8,\n        start = 0\n      } = {}) {\n        start && await lo.seek(start)\n        return new Stream.Writable({\n          highWaterMark,\n          write(chunk, encoding, callback) {\n            lo.write(chunk).then(() => callback(), callback)\n          }\n        })\n      }\n    }).catch(reject)\n  })\n}\n"],
  "mappings": "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",
  "names": ["b", "types", "b", "types", "inferType", "arraySerializer", "arrayParser", "x", "index", "parsers", "backoff", "connection", "query", "net", "error", "types", "tls", "length", "crypto", "x", "b", "Stream", "chunk", "rows", "buffer", "timer", "noop", "postgres", "connection", "sql", "slot", "stream", "state", "x", "b", "parsers", "import_stream", "sql", "Stream", "size", "b", "handler", "sql", "options", "query", "fs", "name", "result", "queries", "connection", "fn", "timer", "a", "os"]
}
